{"version":3,"sources":["src/sdk/TranslationRecognizer.ts"],"names":[],"mappings":"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","file":"TranslationRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Connection } from \"./Connection\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n     *       for single shot recognition like command or query. For long-running recognition,\r\n     *       use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public onConnection(): void { }\r\n\r\n    /**\r\n     * handles disconnection events for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onDisconnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public async onDisconnection(): Promise<void> { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n"]}