{"version":3,"sources":["src/common.speech/SpeakerIdMessageAdapter.ts"],"names":[],"mappings":"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","file":"SpeakerIdMessageAdapter.js","sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    PropertyId,\r\n    SpeakerIdentificationModel,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { SpeakerRecognitionConfig } from \"./Exports\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SpeakerIdMessageAdapter\r\n */\r\nexport class SpeakerIdMessageAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privApiVersion: string;\r\n\r\n    public constructor(config: SpeakerRecognitionConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.api.cognitive${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/speaker-recognition/{mode}/{dependency}/profiles`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        this.privApiVersion = config.parameters.getProperty(PropertyId.SpeakerRecognition_Api_Version, \"2021-09-05\");\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends create profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of voice profile to create.\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\r\n     */\r\n    public createProfile(profileType: VoiceProfileType, lang: string):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams(), { locale: lang });\r\n    }\r\n\r\n    /**\r\n     * Sends create enrollment request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public createEnrollment(profile: VoiceProfile, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\r\n        return audioSource.blob.then<IRestResponse>((result: Blob | Buffer): Promise<IRestResponse> => {\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends verification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async verifySpeaker(model: SpeakerVerificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \":verify\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends identification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async identifySpeaker(model: SpeakerIdentificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \":identifySingleSpeaker\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ profileIds: model.voiceProfileIds, ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends profile status request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to check.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getProfileStatus(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get all profiles request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return list of\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing all profiles\r\n     */\r\n    public getProfiles(profileType: VoiceProfileType): Promise<IRestResponse> {\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get activation/auth phrases request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return phrases for\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\r\n     */\r\n    public getPhrases(profileType: VoiceProfileType, lang: string): Promise<IRestResponse> {\r\n        const uri = `${this.getOperationUri(profileType)}`.replace(`profiles`, `phrases`) + \"/\" + lang;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends delete profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to delete.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to deletion request\r\n     */\r\n    public deleteProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\r\n        return this.privRestAdapter.request(RestRequestType.Delete, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends reset profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to reset request\r\n     */\r\n    public resetProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \":reset\";\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams());\r\n    }\r\n\r\n    private getOperationUri(profileType: VoiceProfileType): string {\r\n\r\n        const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\r\n        const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\r\n        return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\r\n    }\r\n\r\n    private getQueryParams(params: any = {}): any {\r\n\r\n        params[RestConfigBase.configParams.apiVersion] = this.privApiVersion;\r\n        return params;\r\n    }\r\n\r\n}\r\n"]}