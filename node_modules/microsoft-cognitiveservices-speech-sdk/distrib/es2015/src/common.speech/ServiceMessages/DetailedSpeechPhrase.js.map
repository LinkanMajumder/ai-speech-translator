{"version":3,"sources":["src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAoB,iBAAiB,EAAE,MAAM,YAAY,CAAC;AA4BjE,MAAM,OAAO,oBAAoB;IAG7B,YAAoB,IAAY;QAC5B,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,GAAI,iBAAyB,CAAC,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;IAClI,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,IAAY;QAC/B,OAAO,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAEM,2BAA2B,CAAC,UAAkB;QACjD,IAAI,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;YACzF,MAAM,eAAe,GAAW,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACvF,IAAI,eAAe,IAAI,eAAe,GAAG,UAAU,EAAE;gBACjD,MAAM,MAAM,GAAW,UAAU,GAAG,eAAe,CAAC;gBACpD,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE;oBACvD,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE;wBACjB,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE;4BAC9B,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC;yBACzB;qBACJ;iBACJ;aACJ;SACJ;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IACzD,CAAC;IAED,IAAW,iBAAiB;QACxB,OAAO,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC;IAC3D,CAAC;IACD,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC;IAC/C,CAAC;IACD,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC;IAClD,CAAC;IACD,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC;IAChD,CAAC;IACD,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,wBAAwB,CAAC,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,QAAQ,CAAC;IAC5I,CAAC;IACD,IAAW,2BAA2B;QAClC,OAAO,IAAI,CAAC,wBAAwB,CAAC,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,UAAU,CAAC;IAC9I,CAAC;IACD,IAAW,IAAI;QACX,OAAO,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,IAAI,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC;IACxL,CAAC;IACD,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC;IACnD,CAAC;CACJ","file":"DetailedSpeechPhrase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display: string;\r\n    Words?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json);\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privDetailedSpeechPhrase.RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && !!this.privDetailedSpeechPhrase.NBest[0].Words) {\r\n            const firstWordOffset: number = this.privDetailedSpeechPhrase.NBest[0].Words[0].Offset;\r\n            if (firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        return !!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0] ? this.privDetailedSpeechPhrase.NBest[0].Display : this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n"]}