{"version":3,"sources":["src/common.browser/PCMRecorder.ts"],"names":[],"mappings":"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","file":"PCMRecorder.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n        let needHeader: boolean = true;\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n        if (!this.privSpeechProcessorScript) {\r\n            const workletScript = `class SP extends AudioWorkletProcessor {\r\n                constructor(options) {\r\n                  super(options);\r\n                }\r\n                process(inputs, outputs) {\r\n                  const input = inputs[0];\r\n                  const output = [];\r\n                  for (let channel = 0; channel < input.length; channel += 1) {\r\n                    output[channel] = input[channel];\r\n                  }\r\n                  this.port.postMessage(output[0]);\r\n                  return true;\r\n                }\r\n              }\r\n              registerProcessor('speech-processor', SP);`; // tslint:disable-line:max-line-length\r\n            const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n            this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n        }\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n\r\n        if (!!this.privSpeechProcessorScript && !!context.audioWorklet) {\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then(() => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent) => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                                needHeader = false;\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch(() => {\r\n                    const scriptNode = (() => {\r\n                        let bufferSize = 0;\r\n                        try {\r\n                            return context.createScriptProcessor(bufferSize, 1, 1);\r\n                        } catch (error) {\r\n                            // Webkit (<= version 31) requires a valid bufferSize.\r\n                            bufferSize = 2048;\r\n                            let audioSampleRate = context.sampleRate;\r\n                            while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                                bufferSize <<= 1;\r\n                                audioSampleRate >>= 1;\r\n                            }\r\n                            return context.createScriptProcessor(bufferSize, 1, 1);\r\n                        }\r\n                    })();\r\n                    scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\r\n                        const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                                needHeader = false;\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(scriptNode);\r\n                    scriptNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: scriptNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                });\r\n        } else {\r\n            throw new Error(\"Unable to start audio worklet node for PCMRecorder\");\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources = (context: AudioContext): void => {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n"]}