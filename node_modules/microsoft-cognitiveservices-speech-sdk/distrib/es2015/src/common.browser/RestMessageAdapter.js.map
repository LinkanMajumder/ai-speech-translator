{"version":3,"sources":["src/common.browser/RestMessageAdapter.ts"],"names":[],"mappings":"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","file":"RestMessageAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\nimport bent, { BentResponse } from \"bent\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string; };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: any = {};\r\n            arr.forEach((line: any) => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string ): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: any = {},\r\n        body: any = null,\r\n        binaryBody: Blob | Buffer = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: any = {}): IRestResponse => {\r\n            const d: { statusText?: string, statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const blobToArrayBuffer = (blob: Blob) => {\r\n            const reader = new FileReader();\r\n            reader.readAsArrayBuffer(blob);\r\n            return new Promise((resolve: (value: unknown) => void) => {\r\n                reader.onloadend = () => {\r\n                resolve(reader.result);\r\n                };\r\n            });\r\n        };\r\n\r\n        const send = (postData: any): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : \"?\" + this.queryParams(queryParams);\r\n            sendRequest(params, postData).then( async (data: any) => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    const j: any = await data.json();\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                }\r\n            }).catch((error: string) => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            const contentType = \"multipart/form-data\";\r\n            this.privHeaders[\"content-type\"] = contentType;\r\n            this.privHeaders[\"Content-Type\"] = contentType;\r\n            if (typeof (Blob) !== \"undefined\" && binaryBody instanceof Blob) {\r\n                blobToArrayBuffer(binaryBody as Blob).then( (res: any) => {\r\n                    send(res);\r\n                }).catch((error: any) => {\r\n                    responseReceivedDeferral.reject(error);\r\n                });\r\n            } else {\r\n                send(binaryBody as Buffer);\r\n            }\r\n        } else {\r\n            if (method === RestRequestType.Post && body) {\r\n                this.privHeaders[\"content-type\"] = \"application/json\";\r\n                this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n            }\r\n            send(body);\r\n        }\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private withQuery(url: string, params: any = {}): any {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n\r\n    private queryParams(params: any = {}): any {\r\n        return Object.keys(params)\r\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n"]}